#!/bin/bash
#
# A CLI for the Routing Challenge.

# Constants
readonly DOCKER_BUILD_RC_TESTER="rc-tester"

#######################################
# Display an error message when the user input is invalid.
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
err() {
  echo "$0: $1" >&2
}

get_app_name() { # Strips off any `/` characters
  # Allows easy autocompletion in bash using created folder names
  # EG: my-container/ -> my-container
  app_name=$(echo $2 | sed 's|/||')
}

check_app() {
  get_app_name "$@"
  if [[ $# -lt 2 ]]; then
    err "missing app operand"
    exit 1
  elif [[ ! -d $app_name ]]; then
    err "$app_name: app not found"
    exit 1
  fi
}

check_solution() {
  get_app_name "$@"
  if [[ $# -lt 2 ]]; then
    err "missing solution operand"
    exit 1
  elif [[ ! -f "solutions/$app_name.tar.gz" ]]; then
    err "$app_name: solution not found"
    exit 1
  fi
}

make_logs() { # Ensure the necessary log file structure for the calling command
  mkdir -p logs/$1
}

# Single main function
main() {
  if [[ $# -lt 1 ]]; then
    err "missing command operand"
    exit 1
  elif [[ $# -gt 2 ]]; then
    err "too many arguments"
    exit 1
  fi

  # Select the command
  case $1 in
    new) # Create a new app based on a template
      # TODO: Retrieve the template option (-t, --template)
      t="rc-python"
      if [[ $# -lt 2 ]]; then
        err "missing app operand"
        exit 1
      elif [[ -d $2 ]]; then
        err "$2: cannot create app: Already exists"
        exit 1
      elif [[ ! -d "templates/$t" ]]; then
        err "$t: template not found"
        exit 1
      fi

      echo "warn: the templates option is not available yet"
      echo "The 'rc-python' template is set by default"
      cp --recursive "templates/$t" $2
      chmod +x "$2/run.sh"
      mkdir "$2/logs"
      echo "Done."
      ;;

    run) # Build and run the app image
      make_logs "$@"
      check_app "$@" # Note: check_app runs get_app_name to convert $2 to app_name
      cd $app_name
      docker build --tag $app_name . >& \
        "../logs/$1/build-$app_name-$(date --iso-8601=seconds).log"
      docker run --rm \
        --volume "$(pwd)"/data/inputs:/home/app/data/inputs:ro \
        --volume "$(pwd)"/data/outputs:/home/app/data/outputs \
        $app_name
      ;;

    save) # Build the app image and save it to the 'solutions' directory
      make_logs "$@"
      check_app "$@" # Note: check_app runs get_app_name to convert $2 to app_name
      image_name=$app_name
      if [[ -f "solutions/$app_name.tar.gz" ]]; then
        # Prompt confirmation to overwrite or rename image
        read -r -p "image exists: Enter a new name or overwrite [$app_name]: " input
        [[ ${input} != "" ]] && image_name=${input}
      fi
      cd $app_name
      # TODO: Log save with timestamp
      mkdir --parent logs # Create the logs dir if it doesn't exist yet
      echo "Building the app image..."
      docker build --tag ${image_name} . >& \
        "../logs/${1}/build-${image_name}-$(date --iso-8601=seconds).log"
      cd ..
      echo "Done."
      echo
      echo "Saving the app image to 'solutions'..."
      docker save $image_name | gzip > "solutions/${image_name}.tar.gz"
      echo "Done."
      echo
      echo "Success!"
      ;;

    test)
      make_logs "$@"
      check_solution "$@" # Note: check_solution runs get_app_name to convert $2 to app_name
      # Saving time if the '${DOCKER_BUILD_RC_TESTER}' image exists.
      if [[ ! $(docker images --quiet ${DOCKER_BUILD_RC_TESTER}) ]]; then
        echo "Building the '${DOCKER_BUILD_RC_TESTER}' image..."
        docker build --tag ${DOCKER_BUILD_RC_TESTER} . >& \
          "logs/${1}/build-${DOCKER_BUILD_RC_TESTER}-$(date --iso-8601=seconds).log"
      fi
      image_file="$app_name.tar.gz"
      docker run --privileged --rm --env IMAGE_FILE=${image_file} \
        --volume "$(pwd)"/solutions/"${image_file}":"/mnt/${image_file}":ro \
        --volume "$(pwd)"/data/inputs:/data/inputs:ro \
        --volume "$(pwd)"/data/outputs:/data/outputs \
        ${DOCKER_BUILD_RC_TESTER} >& \
          "logs/${1}/run-${image_file}-$(date --iso-8601=seconds).log"
      ;;

    all) # Build, run and save the app image & validate it with the '${DOCKER_BUILD_RC_TESTER}'
      # TODO
      check_app "$@"
      err "this command is not available yet"
      exit 1
      ;;

    purge)
      if [[ $# -gt 1 ]]; then
        err "too many arguments"
        exit 1
      fi

      # TODO: Add are you sure lingo here
      # TODO: Add special tags to containers to make sure we only delete cli created containers

      echo "Removing all dangling images..."
      docker rmi $(docker images --all --filter dangling=true --quiet) >/dev/null >&2
      # TODO: Remove images in 'solutions' directory
      echo "Removing stopped containers..."
      docker container prune --force
      echo "Removing all unused local volumes..."
      docker volume prune --force
      echo "Done."
      ;;

    debug) # Enable an interactive shell at runtime to debug the app container.
      # TODO
      check_app "$@"
      err "this command is not available yet"
      exit 1
      ;;

    *)
      err "$1: command not found"
      exit 1
      ;;
  esac
}

main "$@"
